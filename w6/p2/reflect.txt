/*
***************************
						Workshop 6 - Part - 1
Full Name  :  Ankita Chandel
Student ID#:161317219
Email      : achandel1@myseneca.ca
Section    :ZBB
Date       : 12 March 2023
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
***************************
*/


In this workshop, I learned about the lambda functions and the vectors that helped me in doing this workshop was quite hard
and important as it covers the lambda functions and vectors I faced some difficulties in doing this workshop however with the help 
of notes and youtube conceptual videos I was able to do that workshop.The answer for the following questions are given below.

Ans-1 - The use of the vector container allowed us to store a collection of Person pointers in the member variable m_persons of our College class. This container automatically resizes itself to hold more or less pointers as needed (this is one of the features if the STL containers such as vectors), relieving us from the responsibility of manually allocating and deallocating memory for the pointers. We still have to allocate and deallocate memory for the dynamically created objects formed using the derived classes that inherit the Person interface that each of the pointers in the vector are pointing to.

To ensure proper memory management, we implemented a College destructor that makes use of a constant iterator (to make sure that the address is not changed) to iterate through the vector of Person pointers. We can delete the memory pointed to by the pointer (*i), but the address remains the same.

College::~College() {
    for(auto i = m_persons.begin(); i != m_persons.end(); i++) {
        delete *i;
    }
} 

Ans 2 - The function detects what is wrong by using the try catch block before actually executing the buildInstance function. Here it catch any errors thrown by the buildInstance function while doing its in built validation.
try {
    thePerson = sdds::buildInstance(file);
    if (thePerson)
        theCollege += thePerson;
}
catch (std::string msg) {
    std::cout << msg << '\n';
}

Ans 3 - In this workshop you had to use std::list<sdds::Person*> and std::vector<sdds::Person*> to store a collection of persons as pointers. Could you have used std::list<sdds::Person> and std::vector<sdds::Person> instead? Justify your answer!
-	We are not able to use std::list<sdds::Person> and std::vector<sdds::Person> instead because Person instances cannot be created because of it being an abstract base class. What we can do instead (as we have done in this workshop) is that we can instantiate instances of the classes that inherit the Person interface. This can be done if the derived class is a concrete class. If we make a separate container for each of the concrete classes, it would not make use of the dynamic type allocation and inheritance features that C++ provides.

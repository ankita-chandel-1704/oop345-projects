/*
*****************************************************************************
                        Workshop 8 - Part - 2
Full Name  :  Ankita Chandel
Student ID#: 161317219
Email      : achandel1@myseneca.ca
Section    : ZBB
Date       : 24 March 2023
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

In this workshop, we learn Smart pointers are a better choice than raw pointers because they automatically handle memory deallocation, which eliminates the need for extensive use of try-catch blocks.I faced some difficulties in doing this workshop for that I refer to course notes.

Ans 1 - The code uses a shared_ptr instead of a unique_ptr because a unique_ptr implies exclusive ownership of the object, making it impossible to share the Database instance between different parts of the code.
Database Instance: inline static std::shared_ptr<Database> m_database {};
The instance is static and is therefore shared between every instance created by the Database class. The intent behind the code is to allow multiple parts of the code to access the same instance.

Ans 2 - To convert the Database class into a templated class, everything had to be moved to the header file. Following that, we must write "template typename T>" before the class to indicate that it is a templated one.
We also had to implement the encryption and decryption function, which is general-purpose and has string and long long specialisations. To accomplish this, we write the two functions listed below outside of the class description.
// Specialized Encryption/Decryption functions
template<>
void Database<std::string>::encryptDecrypt(std::string& value) {
    const char secret[]{ "secret encryption key" };
    for (char& c : value) {
        for (const char& k : secret) {
            c = c ^ k;
        }
    }
}

template<>
void Database<long long>::encryptDecrypt(long long& value) {
    const char secret[]{ "super secret encryption key" };
    char* bytes = reinterpret_cast<char*>(&value);
    size_t numBytes = sizeof(value);
    for (size_t i = 0; i < numBytes; i++) {
        for (const char& k : secret) {
            bytes[i] = bytes[i] ^ k;
        }
    }
}

Ans -3 - Yes, there is another way to implement a singleton that does not rely on static. The Database class can be converted to an anonymous class. There will only be one instance of the class this way.
class {
    // code
} instanceName;

Ans - 4 - I think we should stop doing any copying or moving. This is due to the fact that the class's singleton state would be in conflict with its ability to copy and move objects. Multiple copies of the class would be created, which is not what we want.

Ans - 5 - This is due to the code listed below in the primary file.There should have been four builders and four destructors for this class if it weren't a singleton, but there are only two. Because we are using a templated class and Databasestd::string> and Databaselong long> objects are objects instantiated from separate classes, there are two constructors and destructors. We have two builders and destructors instead of four because of this.
void* db1 = sdds::Database<std::string>::getInstance(argv[1]).get();
void* db2 = sdds::Database<long long>::getInstance(argv[2]).get();
void* db3 = sdds::Database<std::string>::getInstance("nothing").get();
void* db4 = sdds::Database<long long>::getInstance("nothing").get();
